name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on tags like v1.0.0, v0.1.0, etc.

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Adjust to your preferred Go version

      # Install dependencies
      - name: Install dependencies
        run: go get

      # Build for Linux
      - name: Build Linux binary
        run: GOOS=linux GOARCH=amd64 go build -o filemux-linux-amd64 filemux.go

      # Build for macOS
      - name: Build macOS binary
        run: GOOS=darwin GOARCH=amd64 go build -o filemux-darwin-amd64 filemux.go

      # Build for Windows
      - name: Build Windows binary
        run: GOOS=windows GOARCH=amd64 go build -o filemux-windows-amd64.exe filemux.go

      # Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload Linux binary
      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./filemux-linux-amd64
          asset_name: filemux-linux-amd64
          asset_content_type: application/octet-stream

      # Upload macOS binary
      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./filemux-darwin-amd64
          asset_name: filemux-darwin-amd64
          asset_content_type: application/octet-stream

      # Upload Windows binary
      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./filemux-windows-amd64.exe
          asset_name: filemux-windows-amd64.exe
          asset_content_type: application/octet-stream